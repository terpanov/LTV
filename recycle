apple_fiscal = pd.read_csv(csv_path, parse_dates=True, index_col=None)
apple_fiscal['start_date'] = pd.to_datetime(apple_fiscal['start_date'])  # convert date object to datatime
apple_starts = apple_fiscal['start_date']  # assign start dates to datatime
apple_fiscal['end_date'] = pd.to_datetime(apple_fiscal['end_date'])
apple_ends = apple_fiscal['end_date']
apple_fiscal['pay_date'] = pd.to_datetime(apple_fiscal['pay_date'])
apple_pays = apple_fiscal['pay_date']
apple_fiscal['payment_start'] = pd.to_datetime(apple_fiscal['payment_start'])
payment_start = apple_fiscal['payment_start']
apple_fiscal['payment_end'] = pd.to_datetime(apple_fiscal['payment_end'])
payment_end = apple_fiscal['payment_end']
year, month, day = map(int, date_entry.split('-'))  # set parse format
sample_date = datetime.date(year, month, day)  # parse date entry string
start_datelist = pd.date_range(sample_date, periods=365).tolist()  # create list of annual dates
start_apple_table = pd.DataFrame(start_datelist)  # convert list to dataframe
start_apple_table.index.name = 'days'  # name index 'days'
start_apple_table.columns = ['date']  # name dates column 'date'
start_apple_table['date'] = start_apple_table.loc[(start_apple_table['date'].isin(apple_starts)), 'start_date'] \
	= start_apple_table['date']  # create start date column
start_apple_table['start_date'] = start_apple_table['start_date']
start_apple_table['date'] = start_apple_table.loc[(start_apple_table['date'].isin(apple_ends)), 'end_date'] \
	= start_apple_table['date']  # create end date column
start_apple_table['end_date'] = start_apple_table['end_date']
start_apple_table['date'] = start_apple_table.loc[(start_apple_table['date'].isin(apple_pays)), 'pay_date'] \
	= start_apple_table['date']  # create pay date column

#apple_duration = apple_fiscal[['start_date', 'month_duration']]
#start_apple_table = start_apple_table.merge(apple_duration, how='left', on='start_date', left_index=True)
#start_apple_table['month_duration'] = pd.to_timedelta(start_apple_table['month_duration'], unit='D')

check = start_apple_table.loc[start_apple_table['start_date'].first_valid_index()]
check2 = start_apple_table.loc[start_apple_table['end_date'].first_valid_index()]
check
check2
apple_period['payment_start'] = pd.date_range(check['date'] - check['month_duration'] - pd.DateOffset(days=1), periods=365).tolist()
payment_datelist = apple_period['payment_start']
payment_series = pd.Series(payment_datelist)
start_apple_table['payment_start'] = payment_series

start_apple_table = start_apple_table.set_index('date')

# create a column starting with first date in the payment period
apple_fiscal
start_apple_table.head()
start_apple_table['payment_period']

check = start_apple_table.loc[start_apple_table['start_date'].first_valid_index()]
check = pd.to_datetime(check)
apple_period['payment_start'] = pd.date_range(check['date'] - pd.DateOffset(days=1), periods=365).tolist()
payment_datelist = apple_period['payment_start']
payment_series = pd.Series(payment_datelist)
start_apple_table['payment_start'] = payment_series

check = start_apple_table.loc[start_apple_table['end_date'].first_valid_index()]
check = pd.to_datetime(check)
apple_period['payment_end'] = pd.date_range(check['date'] - pd.DateOffset(days=1), periods=365).tolist()
payment_datelist = apple_period['payment_end']
payment_series = pd.Series(payment_datelist)
start_apple_table['payment_end'] = payment_series

start_apple_table['date'] = start_apple_table.loc[(start_apple_table['date'].isin(payment_start)), 'pay_start'] \
	= start_apple_table['date']  # create pay date column
start_apple_table['date'] = start_apple_table.loc[(start_apple_table['date'].isin(payment_end)), 'pay_end'] \
	= start_apple_table['date']  # create pay date column
